---
- name: Setup Security and Monitoring for TSI
  hosts: all
  become: yes
  vars:
    prometheus_version: "2.26.0"
    prometheus_user: "prometheus"
    prometheus_group: "prometheus"
    prometheus_dir: "/etc/prometheus"
    prometheus_data_dir: "/var/lib/prometheus"
    prometheus_config: |
      global:
        scrape_interval: 15s

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - wget
          - tar
          - ufw
          - openssl
          - nginx
        state: present

    - name: Create Prometheus user and group
      user:
        name: "{{ prometheus_user }}"
        group: "{{ prometheus_group }}"
        system: yes
        shell: /sbin/nologin

    - name: Create Prometheus directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ prometheus_user }}"
        group: "{{ prometheus_group }}"
        mode: '0755'
      loop:
        - "{{ prometheus_dir }}"
        - "{{ prometheus_data_dir }}"

    - name: Download Prometheus
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
        dest: "/tmp/prometheus.tar.gz"

    - name: Extract Prometheus
      unarchive:
        src: "/tmp/prometheus.tar.gz"
        dest: "/tmp/"
        creates: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64"

    - name: Move Prometheus binaries
      copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}"
        dest: "/usr/local/bin/"
        owner: root
        group: root
        mode: '0755'
      loop:
        - prometheus
        - promtool

    - name: Move Prometheus configuration
      copy:
        content: "{{ prometheus_config }}"
        dest: "{{ prometheus_dir }}/prometheus.yml"
        owner: "{{ prometheus_user }}"
        group: "{{ prometheus_group }}"
        mode: '0644'

    - name: Create Prometheus service
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User={{ prometheus_user }}
          Group={{ prometheus_group }}
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
            --config.file {{ prometheus_dir }}/prometheus.yml \
            --storage.tsdb.path {{ prometheus_data_dir }}

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to register Prometheus service
      systemd:
        daemon_reload: yes

    - name: Enable and start Prometheus service
      systemd:
        name: prometheus
        enabled: yes
        state: started

    - name: Configure UFW - Allow SSH
      ufw:
        rule: allow
        port: 22

    - name: Configure UFW - Allow Prometheus
      ufw:
        rule: allow
        port: 9090

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Generate OpenSSL certificate
      command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt
      args:
        creates: /etc/ssl/private/nginx-selfsigned.key

    - name: Create Diffie-Hellman group
      command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
      args:
        creates: /etc/ssl/certs/dhparam.pem

    - name: Configure Nginx for SSL
      copy:
        dest: /etc/nginx/snippets/self-signed.conf
        content: |
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    - name: Configure Nginx SSL parameters
      copy:
        dest: /etc/nginx/snippets/ssl-params.conf
        content: |
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_dhparam /etc/ssl/certs/dhparam.pem;
          ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
          ssl_ecdh_curve secp384r1;
          ssl_session_timeout  10m;
          ssl_session_cache shared:SSL:10m;
          ssl_stapling on;
          ssl_stapling_verify on;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
          resolver_timeout 5s;
          add_header X-Content-Type-Options nosniff;
          add_header X-Frame-Options DENY;
          add_header X-XSS-Protection "1; mode=block";

    - name: Configure Nginx server block for Prometheus
      copy:
        dest: /etc/nginx/sites-available/prometheus
        content: |
          server {
              listen 80;
              listen [::]:80;
              server_name example.com;

              location / {
                  proxy_pass http://localhost:9090;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              listen 443 ssl; # managed by Certbot
              include snippets/self-signed.conf;
              include snippets/ssl-params.conf;
          }
      notify:
        - Reload Nginx

    - name: Enable Nginx server block
      file:
        src: /etc/nginx/sites-available/prometheus
        dest: /etc/nginx/sites-enabled/
        state: link

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Reload Nginx

  handlers:
    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
